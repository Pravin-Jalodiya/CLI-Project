// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Projects-WG\CLI-Project\internal\domain\interfaces\user_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "cli-project/internal/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// BanUser mocks base method.
func (m *MockUserRepository) BanUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BanUser indicates an expected call of BanUser.
func (mr *MockUserRepositoryMockRecorder) BanUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanUser", reflect.TypeOf((*MockUserRepository)(nil).BanUser), arg0)
}

// CountActiveUsersInLast24Hours mocks base method.
func (m *MockUserRepository) CountActiveUsersInLast24Hours() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountActiveUsersInLast24Hours")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountActiveUsersInLast24Hours indicates an expected call of CountActiveUsersInLast24Hours.
func (mr *MockUserRepositoryMockRecorder) CountActiveUsersInLast24Hours() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountActiveUsersInLast24Hours", reflect.TypeOf((*MockUserRepository)(nil).CountActiveUsersInLast24Hours))
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(arg0 *models.StandardUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), arg0)
}

// FetchAllUsers mocks base method.
func (m *MockUserRepository) FetchAllUsers() (*[]models.StandardUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllUsers")
	ret0, _ := ret[0].(*[]models.StandardUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllUsers indicates an expected call of FetchAllUsers.
func (mr *MockUserRepositoryMockRecorder) FetchAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllUsers", reflect.TypeOf((*MockUserRepository)(nil).FetchAllUsers))
}

// FetchUserByID mocks base method.
func (m *MockUserRepository) FetchUserByID(arg0 string) (*models.StandardUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByID", arg0)
	ret0, _ := ret[0].(*models.StandardUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByID indicates an expected call of FetchUserByID.
func (mr *MockUserRepositoryMockRecorder) FetchUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByID", reflect.TypeOf((*MockUserRepository)(nil).FetchUserByID), arg0)
}

// FetchUserByUsername mocks base method.
func (m *MockUserRepository) FetchUserByUsername(arg0 string) (*models.StandardUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByUsername", arg0)
	ret0, _ := ret[0].(*models.StandardUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByUsername indicates an expected call of FetchUserByUsername.
func (mr *MockUserRepositoryMockRecorder) FetchUserByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByUsername", reflect.TypeOf((*MockUserRepository)(nil).FetchUserByUsername), arg0)
}

// IsEmailUnique mocks base method.
func (m *MockUserRepository) IsEmailUnique(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailUnique", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailUnique indicates an expected call of IsEmailUnique.
func (mr *MockUserRepositoryMockRecorder) IsEmailUnique(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailUnique", reflect.TypeOf((*MockUserRepository)(nil).IsEmailUnique), arg0)
}

// IsLeetcodeIDUnique mocks base method.
func (m *MockUserRepository) IsLeetcodeIDUnique(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLeetcodeIDUnique", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLeetcodeIDUnique indicates an expected call of IsLeetcodeIDUnique.
func (mr *MockUserRepositoryMockRecorder) IsLeetcodeIDUnique(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLeetcodeIDUnique", reflect.TypeOf((*MockUserRepository)(nil).IsLeetcodeIDUnique), arg0)
}

// IsUsernameUnique mocks base method.
func (m *MockUserRepository) IsUsernameUnique(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUsernameUnique", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUsernameUnique indicates an expected call of IsUsernameUnique.
func (mr *MockUserRepositoryMockRecorder) IsUsernameUnique(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUsernameUnique", reflect.TypeOf((*MockUserRepository)(nil).IsUsernameUnique), arg0)
}

// UnbanUser mocks base method.
func (m *MockUserRepository) UnbanUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbanUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbanUser indicates an expected call of UnbanUser.
func (mr *MockUserRepositoryMockRecorder) UnbanUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbanUser", reflect.TypeOf((*MockUserRepository)(nil).UnbanUser), arg0)
}

// UpdateUserDetails mocks base method.
func (m *MockUserRepository) UpdateUserDetails(arg0 *models.StandardUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDetails", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserDetails indicates an expected call of UpdateUserDetails.
func (mr *MockUserRepositoryMockRecorder) UpdateUserDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDetails", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserDetails), arg0)
}

// UpdateUserProgress mocks base method.
func (m *MockUserRepository) UpdateUserProgress(questionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProgress", questionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProgress indicates an expected call of UpdateUserProgress.
func (mr *MockUserRepositoryMockRecorder) UpdateUserProgress(questionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProgress", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserProgress), questionID)
}
