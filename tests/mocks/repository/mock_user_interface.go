// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/pravin/Desktop/CODESAGE/internal/domain/interfaces/user_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "cli-project/internal/domain/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// BanUser mocks base method.
func (m *MockUserRepository) BanUser(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BanUser indicates an expected call of BanUser.
func (mr *MockUserRepositoryMockRecorder) BanUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanUser", reflect.TypeOf((*MockUserRepository)(nil).BanUser), ctx, userID)
}

// CountActiveUsersInLast24Hours mocks base method.
func (m *MockUserRepository) CountActiveUsersInLast24Hours(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountActiveUsersInLast24Hours", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountActiveUsersInLast24Hours indicates an expected call of CountActiveUsersInLast24Hours.
func (mr *MockUserRepositoryMockRecorder) CountActiveUsersInLast24Hours(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountActiveUsersInLast24Hours", reflect.TypeOf((*MockUserRepository)(nil).CountActiveUsersInLast24Hours), ctx)
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user *models.StandardUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// FetchAllUsers mocks base method.
func (m *MockUserRepository) FetchAllUsers(ctx context.Context) ([]models.StandardUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllUsers", ctx)
	ret0, _ := ret[0].([]models.StandardUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllUsers indicates an expected call of FetchAllUsers.
func (mr *MockUserRepositoryMockRecorder) FetchAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllUsers", reflect.TypeOf((*MockUserRepository)(nil).FetchAllUsers), ctx)
}

// FetchUserByID mocks base method.
func (m *MockUserRepository) FetchUserByID(ctx context.Context, id string) (*models.StandardUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByID", ctx, id)
	ret0, _ := ret[0].(*models.StandardUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByID indicates an expected call of FetchUserByID.
func (mr *MockUserRepositoryMockRecorder) FetchUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByID", reflect.TypeOf((*MockUserRepository)(nil).FetchUserByID), ctx, id)
}

// FetchUserByUsername mocks base method.
func (m *MockUserRepository) FetchUserByUsername(ctx context.Context, username string) (*models.StandardUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByUsername", ctx, username)
	ret0, _ := ret[0].(*models.StandardUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByUsername indicates an expected call of FetchUserByUsername.
func (mr *MockUserRepositoryMockRecorder) FetchUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByUsername", reflect.TypeOf((*MockUserRepository)(nil).FetchUserByUsername), ctx, username)
}

// FetchUserProgress mocks base method.
func (m *MockUserRepository) FetchUserProgress(ctx context.Context, userID string) (*[]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserProgress", ctx, userID)
	ret0, _ := ret[0].(*[]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserProgress indicates an expected call of FetchUserProgress.
func (mr *MockUserRepositoryMockRecorder) FetchUserProgress(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserProgress", reflect.TypeOf((*MockUserRepository)(nil).FetchUserProgress), ctx, userID)
}

// IsEmailUnique mocks base method.
func (m *MockUserRepository) IsEmailUnique(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailUnique", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailUnique indicates an expected call of IsEmailUnique.
func (mr *MockUserRepositoryMockRecorder) IsEmailUnique(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailUnique", reflect.TypeOf((*MockUserRepository)(nil).IsEmailUnique), ctx, email)
}

// IsLeetcodeIDUnique mocks base method.
func (m *MockUserRepository) IsLeetcodeIDUnique(ctx context.Context, leetcodeID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLeetcodeIDUnique", ctx, leetcodeID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLeetcodeIDUnique indicates an expected call of IsLeetcodeIDUnique.
func (mr *MockUserRepositoryMockRecorder) IsLeetcodeIDUnique(ctx, leetcodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLeetcodeIDUnique", reflect.TypeOf((*MockUserRepository)(nil).IsLeetcodeIDUnique), ctx, leetcodeID)
}

// IsUsernameUnique mocks base method.
func (m *MockUserRepository) IsUsernameUnique(ctx context.Context, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUsernameUnique", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUsernameUnique indicates an expected call of IsUsernameUnique.
func (mr *MockUserRepositoryMockRecorder) IsUsernameUnique(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUsernameUnique", reflect.TypeOf((*MockUserRepository)(nil).IsUsernameUnique), ctx, username)
}

// UnbanUser mocks base method.
func (m *MockUserRepository) UnbanUser(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbanUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbanUser indicates an expected call of UnbanUser.
func (mr *MockUserRepositoryMockRecorder) UnbanUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbanUser", reflect.TypeOf((*MockUserRepository)(nil).UnbanUser), ctx, userID)
}

// UpdateUserDetails mocks base method.
func (m *MockUserRepository) UpdateUserDetails(ctx context.Context, user *models.StandardUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDetails", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserDetails indicates an expected call of UpdateUserDetails.
func (mr *MockUserRepositoryMockRecorder) UpdateUserDetails(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDetails", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserDetails), ctx, user)
}

// UpdateUserProgress mocks base method.
func (m *MockUserRepository) UpdateUserProgress(ctx context.Context, userID uuid.UUID, questionID []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProgress", ctx, userID, questionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProgress indicates an expected call of UpdateUserProgress.
func (mr *MockUserRepositoryMockRecorder) UpdateUserProgress(ctx, userID, questionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProgress", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserProgress), ctx, userID, questionID)
}
