// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/pravin/Desktop/CODESAGE/external/domain/interfaces/leetcode_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "cli-project/internal/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLeetcodeAPI is a mock of LeetcodeAPI interface.
type MockLeetcodeAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLeetcodeAPIMockRecorder
}

// MockLeetcodeAPIMockRecorder is the mock recorder for MockLeetcodeAPI.
type MockLeetcodeAPIMockRecorder struct {
	mock *MockLeetcodeAPI
}

// NewMockLeetcodeAPI creates a new mock instance.
func NewMockLeetcodeAPI(ctrl *gomock.Controller) *MockLeetcodeAPI {
	mock := &MockLeetcodeAPI{ctrl: ctrl}
	mock.recorder = &MockLeetcodeAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeetcodeAPI) EXPECT() *MockLeetcodeAPIMockRecorder {
	return m.recorder
}

// FetchData mocks base method.
func (m *MockLeetcodeAPI) FetchData(arg0 string, arg1 map[string]interface{}) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchData", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchData indicates an expected call of FetchData.
func (mr *MockLeetcodeAPIMockRecorder) FetchData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchData", reflect.TypeOf((*MockLeetcodeAPI)(nil).FetchData), arg0, arg1)
}

// GetRecentACSubmission mocks base method.
func (m *MockLeetcodeAPI) GetRecentACSubmission(username string, limit int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentACSubmission", username, limit)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentACSubmission indicates an expected call of GetRecentACSubmission.
func (mr *MockLeetcodeAPIMockRecorder) GetRecentACSubmission(username, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentACSubmission", reflect.TypeOf((*MockLeetcodeAPI)(nil).GetRecentACSubmission), username, limit)
}

// GetRecentACSubmissionQuestionIDs mocks base method.
func (m *MockLeetcodeAPI) GetRecentACSubmissionQuestionIDs(username string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentACSubmissionQuestionIDs", username)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentACSubmissionQuestionIDs indicates an expected call of GetRecentACSubmissionQuestionIDs.
func (mr *MockLeetcodeAPIMockRecorder) GetRecentACSubmissionQuestionIDs(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentACSubmissionQuestionIDs", reflect.TypeOf((*MockLeetcodeAPI)(nil).GetRecentACSubmissionQuestionIDs), username)
}

// GetStats mocks base method.
func (m *MockLeetcodeAPI) GetStats(leetcodeID string) (*models.LeetcodeStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", leetcodeID)
	ret0, _ := ret[0].(*models.LeetcodeStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockLeetcodeAPIMockRecorder) GetStats(leetcodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockLeetcodeAPI)(nil).GetStats), leetcodeID)
}

// GetUserProblemSolved mocks base method.
func (m *MockLeetcodeAPI) GetUserProblemSolved(username string) (*models.LeetcodeStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProblemSolved", username)
	ret0, _ := ret[0].(*models.LeetcodeStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProblemSolved indicates an expected call of GetUserProblemSolved.
func (mr *MockLeetcodeAPIMockRecorder) GetUserProblemSolved(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProblemSolved", reflect.TypeOf((*MockLeetcodeAPI)(nil).GetUserProblemSolved), username)
}

// ValidateUsername mocks base method.
func (m *MockLeetcodeAPI) ValidateUsername(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUsername", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUsername indicates an expected call of ValidateUsername.
func (mr *MockLeetcodeAPIMockRecorder) ValidateUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUsername", reflect.TypeOf((*MockLeetcodeAPI)(nil).ValidateUsername), username)
}
