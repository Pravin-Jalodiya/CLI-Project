// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Projects-WG\CLI-Project\internal\domain\interfaces\question_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "cli-project/internal/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuestionRepository is a mock of QuestionRepository interface.
type MockQuestionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionRepositoryMockRecorder
}

// MockQuestionRepositoryMockRecorder is the mock recorder for MockQuestionRepository.
type MockQuestionRepositoryMockRecorder struct {
	mock *MockQuestionRepository
}

// NewMockQuestionRepository creates a new mock instance.
func NewMockQuestionRepository(ctrl *gomock.Controller) *MockQuestionRepository {
	mock := &MockQuestionRepository{ctrl: ctrl}
	mock.recorder = &MockQuestionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionRepository) EXPECT() *MockQuestionRepositoryMockRecorder {
	return m.recorder
}

// AddQuestions mocks base method.
func (m *MockQuestionRepository) AddQuestions(arg0 *[]models.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddQuestions indicates an expected call of AddQuestions.
func (mr *MockQuestionRepositoryMockRecorder) AddQuestions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestions", reflect.TypeOf((*MockQuestionRepository)(nil).AddQuestions), arg0)
}

// AddQuestionsByID mocks base method.
func (m *MockQuestionRepository) AddQuestionsByID(arg0 *[]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestionsByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddQuestionsByID indicates an expected call of AddQuestionsByID.
func (mr *MockQuestionRepositoryMockRecorder) AddQuestionsByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestionsByID", reflect.TypeOf((*MockQuestionRepository)(nil).AddQuestionsByID), arg0)
}

// CountQuestions mocks base method.
func (m *MockQuestionRepository) CountQuestions() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountQuestions")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountQuestions indicates an expected call of CountQuestions.
func (mr *MockQuestionRepositoryMockRecorder) CountQuestions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountQuestions", reflect.TypeOf((*MockQuestionRepository)(nil).CountQuestions))
}

// FetchAllQuestions mocks base method.
func (m *MockQuestionRepository) FetchAllQuestions() (*[]models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllQuestions")
	ret0, _ := ret[0].(*[]models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllQuestions indicates an expected call of FetchAllQuestions.
func (mr *MockQuestionRepositoryMockRecorder) FetchAllQuestions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllQuestions", reflect.TypeOf((*MockQuestionRepository)(nil).FetchAllQuestions))
}

// FetchQuestionByID mocks base method.
func (m *MockQuestionRepository) FetchQuestionByID(arg0 string) (*models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchQuestionByID", arg0)
	ret0, _ := ret[0].(*models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchQuestionByID indicates an expected call of FetchQuestionByID.
func (mr *MockQuestionRepositoryMockRecorder) FetchQuestionByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchQuestionByID", reflect.TypeOf((*MockQuestionRepository)(nil).FetchQuestionByID), arg0)
}

// FetchQuestionsByFilters mocks base method.
func (m *MockQuestionRepository) FetchQuestionsByFilters(arg0, arg1, arg2 string) (*[]models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchQuestionsByFilters", arg0, arg1, arg2)
	ret0, _ := ret[0].(*[]models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchQuestionsByFilters indicates an expected call of FetchQuestionsByFilters.
func (mr *MockQuestionRepositoryMockRecorder) FetchQuestionsByFilters(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchQuestionsByFilters", reflect.TypeOf((*MockQuestionRepository)(nil).FetchQuestionsByFilters), arg0, arg1, arg2)
}

// QuestionExists mocks base method.
func (m *MockQuestionRepository) QuestionExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuestionExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuestionExists indicates an expected call of QuestionExists.
func (mr *MockQuestionRepositoryMockRecorder) QuestionExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuestionExists", reflect.TypeOf((*MockQuestionRepository)(nil).QuestionExists), arg0)
}

// RemoveQuestionByID mocks base method.
func (m *MockQuestionRepository) RemoveQuestionByID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveQuestionByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveQuestionByID indicates an expected call of RemoveQuestionByID.
func (mr *MockQuestionRepositoryMockRecorder) RemoveQuestionByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveQuestionByID", reflect.TypeOf((*MockQuestionRepository)(nil).RemoveQuestionByID), arg0)
}
