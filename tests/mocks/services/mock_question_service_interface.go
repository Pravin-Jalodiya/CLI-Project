// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Projects-WG\CLI-Project\internal\domain\interfaces\question_service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "cli-project/internal/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuestionService is a mock of QuestionService interface.
type MockQuestionService struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionServiceMockRecorder
}

// MockQuestionServiceMockRecorder is the mock recorder for MockQuestionService.
type MockQuestionServiceMockRecorder struct {
	mock *MockQuestionService
}

// NewMockQuestionService creates a new mock instance.
func NewMockQuestionService(ctrl *gomock.Controller) *MockQuestionService {
	mock := &MockQuestionService{ctrl: ctrl}
	mock.recorder = &MockQuestionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionService) EXPECT() *MockQuestionServiceMockRecorder {
	return m.recorder
}

// AddQuestionsFromFile mocks base method.
func (m *MockQuestionService) AddQuestionsFromFile(questionFilePath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestionsFromFile", questionFilePath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestionsFromFile indicates an expected call of AddQuestionsFromFile.
func (mr *MockQuestionServiceMockRecorder) AddQuestionsFromFile(questionFilePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestionsFromFile", reflect.TypeOf((*MockQuestionService)(nil).AddQuestionsFromFile), questionFilePath)
}

// GetAllQuestions mocks base method.
func (m *MockQuestionService) GetAllQuestions() (*[]models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuestions")
	ret0, _ := ret[0].(*[]models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQuestions indicates an expected call of GetAllQuestions.
func (mr *MockQuestionServiceMockRecorder) GetAllQuestions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuestions", reflect.TypeOf((*MockQuestionService)(nil).GetAllQuestions))
}

// GetQuestionByID mocks base method.
func (m *MockQuestionService) GetQuestionByID(questionID string) (*models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionByID", questionID)
	ret0, _ := ret[0].(*models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionByID indicates an expected call of GetQuestionByID.
func (mr *MockQuestionServiceMockRecorder) GetQuestionByID(questionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionByID", reflect.TypeOf((*MockQuestionService)(nil).GetQuestionByID), questionID)
}

// GetQuestionsByFilters mocks base method.
func (m *MockQuestionService) GetQuestionsByFilters(difficulty, company, topic string) (*[]models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionsByFilters", difficulty, company, topic)
	ret0, _ := ret[0].(*[]models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionsByFilters indicates an expected call of GetQuestionsByFilters.
func (mr *MockQuestionServiceMockRecorder) GetQuestionsByFilters(difficulty, company, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionsByFilters", reflect.TypeOf((*MockQuestionService)(nil).GetQuestionsByFilters), difficulty, company, topic)
}

// GetTotalQuestionsCount mocks base method.
func (m *MockQuestionService) GetTotalQuestionsCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalQuestionsCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalQuestionsCount indicates an expected call of GetTotalQuestionsCount.
func (mr *MockQuestionServiceMockRecorder) GetTotalQuestionsCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalQuestionsCount", reflect.TypeOf((*MockQuestionService)(nil).GetTotalQuestionsCount))
}

// QuestionExists mocks base method.
func (m *MockQuestionService) QuestionExists(questionID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuestionExists", questionID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuestionExists indicates an expected call of QuestionExists.
func (mr *MockQuestionServiceMockRecorder) QuestionExists(questionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuestionExists", reflect.TypeOf((*MockQuestionService)(nil).QuestionExists), questionID)
}

// RemoveQuestionByID mocks base method.
func (m *MockQuestionService) RemoveQuestionByID(questionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveQuestionByID", questionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveQuestionByID indicates an expected call of RemoveQuestionByID.
func (mr *MockQuestionServiceMockRecorder) RemoveQuestionByID(questionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveQuestionByID", reflect.TypeOf((*MockQuestionService)(nil).RemoveQuestionByID), questionID)
}
